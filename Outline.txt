Thesis outline:

Abstract:
	abstract here

Introduction:
	WRITE THIS AFTER THE OTHER CHAPTERS
	I NEED TO KNOW WHAT I'VE SAID BEFORE I INTRODUCE THEM
	(in this dissertation i will be discussing these three things in my composition. I've come here by my feeling that there are things missing in the typical commercial softwares)
	Not a method or ideology, but a system

Chapter I:
	Some prerequisite knowledge
		A: Lilypond’s model of music Notation
			1.) compare notational model with other models of music notation.
				a.) pitch systems from no accidental to accidentals
				b.) rhythmic systems (written versus prolated durations)
			2.) compare user interface with other notation software.
				a.) bach in max
				b.) openmusic & PWGL
			3.) compare lilypond syntax with LaTeX
		B: Python
			1.) types of programming languages (Procedural, Functional, Object-oriented)
			2.) programming fundamentals
			3.) python fundamentals
				a.) integers, lists, strings (and to a lesser extent, dictionaries)
				b.) slicing
				c.) list comprehensions and loops
				d.) concatenate, append, extend
				e.) functions
				f.) classes
				g.) packages
		C: Abjad
			1.) brief history of abjad
			2.) abjad fundamentals (isn’t this basically covered in chapter 2? how should this be balanced?)
			3.) some coding "best practices" with abjad (imports and 'abjad.')

Chapter II:
	My compositional practice with the ecosystem of python<->abjad->lilypond->interpreters(performers AND audience)
		A: My methodology
			1.) how is this useful to me as a composer?
			2.) automating the boring stuff
			3.) composing in an iterable fashion
			4.) composing with algorithms and models
			5.) a comfortable formalism in score control is not necessarily algorithmic utopia
		B: The need to build more tools to simplify tasks
			1.) container, spanner, leaf(and logical ties), indicator
			2.) abjad.Score, abjad.StaffGroup, abjad.Staff, abjad.Voice
			3.) abjad.Note, abjad.Rest, abjad.MultimeasureRest
			4.) abjad.Select, abjad.Iterate
			5.) stylesheets
			6.) context concatenation
		C: The need to build tools for a more personalized approach to music-making
			1.) why should i build my own tools?
			2.) abjad-ext
				a.) why does abjad-ext exist?
				b.) rmakers
				c.) other packages
			3.) timespans (brief)
			4.) micotonal expansion in abjad 2.21
				a.) file systems and alterations
				b.) microtonal.ily
				c.) editing the font
				d.) ekmel.ily
				e.) abjad 3.0 system change
				f.) removal of float paradigm
				g.) in progress
			5.) musicmakers (python package?)
				a.) TaleaMusicMaker
				b.) TupletMusicMaker
				c.) EvenDivisionMusicMaker
				d.) NoteMusicMaker

Chapter III:
	Compositions
		A: Adumbration (string trio no.2)
		B: Guerrero (for 16 saxophones)
		C: ‘Short Orchestra Piece'

Conclusion
	A: In these three pieces I have synthesized my knowledge of music notation and programming to create music that is congruous with my artistic desires.
		1: Open source ideology of abjad (could move elsewhere)
			a.) GitHub repositories
			b.) Do everything in python (else use a stylesheet) never tamper with results. There is always an abjad way.
		2: This text is not meant to engender copycats or to convince people to work the way I do. It is meant to show people avenues of using a particular software system and leveraging it to their own compositional needs.
